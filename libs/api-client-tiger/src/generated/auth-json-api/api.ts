/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from "./configuration.js";
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
// Some imports not used depending on template conditions, we also need prettier-ignore so that the import does not get split and ts-ignore still works
// prettier-ignore
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common.js';
// Some imports not used depending on template conditions, we also need prettier-ignore so that the import does not get split and ts-ignore still works
// prettier-ignore
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base.js';

/**
 *
 * @export
 * @interface FeatureFlagsContext
 */
export interface FeatureFlagsContext {
    /**
     *
     * @type {string}
     * @memberof FeatureFlagsContext
     */
    earlyAccess: string;
}
/**
 * Base Structure for feature flags
 * @export
 * @interface Features
 */
export interface Features {
    /**
     *
     * @type {FeatureFlagsContext}
     * @memberof Features
     */
    context: FeatureFlagsContext;
}
/**
 *
 * @export
 * @interface Invitation
 */
export interface Invitation {
    /**
     *
     * @type {string}
     * @memberof Invitation
     */
    email: string;
}
/**
 *
 * @export
 * @interface LiveFeatureFlagConfiguration
 */
export interface LiveFeatureFlagConfiguration {
    /**
     *
     * @type {string}
     * @memberof LiveFeatureFlagConfiguration
     */
    host: string;
    /**
     *
     * @type {string}
     * @memberof LiveFeatureFlagConfiguration
     */
    key: string;
}
/**
 * Structure for featureHub
 * @export
 * @interface LiveFeatures
 */
export interface LiveFeatures {
    /**
     *
     * @type {FeatureFlagsContext}
     * @memberof LiveFeatures
     */
    context: FeatureFlagsContext;
    /**
     *
     * @type {LiveFeatureFlagConfiguration}
     * @memberof LiveFeatures
     */
    configuration: LiveFeatureFlagConfiguration;
}
/**
 *
 * @export
 * @interface LiveFeaturesAllOf
 */
export interface LiveFeaturesAllOf {
    /**
     *
     * @type {LiveFeatureFlagConfiguration}
     * @memberof LiveFeaturesAllOf
     */
    configuration?: LiveFeatureFlagConfiguration;
}
/**
 * Matomo service.
 * @export
 * @interface MatomoService
 */
export interface MatomoService {
    /**
     * Telemetry host to send events to.
     * @type {string}
     * @memberof MatomoService
     */
    host: string;
    /**
     * Site ID on telemetry server.
     * @type {number}
     * @memberof MatomoService
     */
    siteId: number;
}
/**
 * OpenTelemetry service.
 * @export
 * @interface OpenTelemetryService
 */
export interface OpenTelemetryService {
    /**
     * Telemetry host to send events to.
     * @type {string}
     * @memberof OpenTelemetryService
     */
    host: string;
}
/**
 *
 * @export
 * @interface Profile
 */
export interface Profile {
    /**
     *
     * @type {string}
     * @memberof Profile
     */
    organizationId: string;
    /**
     *
     * @type {string}
     * @memberof Profile
     */
    organizationName: string;
    /**
     *
     * @type {string}
     * @memberof Profile
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof Profile
     */
    userId: string;
    /**
     *
     * @type {Telemetry}
     * @memberof Profile
     * @deprecated
     */
    telemetry?: Telemetry;
    /**
     *
     * @type {TelemetryConfig}
     * @memberof Profile
     */
    telemetryConfig: TelemetryConfig;
    /**
     *
     * @type {ProfileLinks}
     * @memberof Profile
     */
    links: ProfileLinks;
    /**
     *
     * @type {LiveFeatures | StaticFeatures}
     * @memberof Profile
     */
    features: LiveFeatures | StaticFeatures;
}
/**
 *
 * @export
 * @interface ProfileLinks
 */
export interface ProfileLinks {
    /**
     *
     * @type {string}
     * @memberof ProfileLinks
     */
    self: string;
    /**
     *
     * @type {string}
     * @memberof ProfileLinks
     */
    organization: string;
    /**
     *
     * @type {string}
     * @memberof ProfileLinks
     */
    user: string;
}
/**
 * Structure for offline feature flag
 * @export
 * @interface StaticFeatures
 */
export interface StaticFeatures {
    /**
     *
     * @type {FeatureFlagsContext}
     * @memberof StaticFeatures
     */
    context: FeatureFlagsContext;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof StaticFeatures
     */
    items: { [key: string]: string };
}
/**
 *
 * @export
 * @interface StaticFeaturesAllOf
 */
export interface StaticFeaturesAllOf {
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof StaticFeaturesAllOf
     */
    items?: { [key: string]: string };
}
/**
 * Telemetry configuration to be used by client.
 * @export
 * @interface Telemetry
 */
export interface Telemetry {
    /**
     * Telemetry host to send events to.
     * @type {string}
     * @memberof Telemetry
     */
    host: string;
    /**
     * Site ID on telemetry server.
     * @type {number}
     * @memberof Telemetry
     */
    siteId: number;
    /**
     * Identification of the deployment to be sent to telemetry server.
     * @type {string}
     * @memberof Telemetry
     */
    deploymentId: string;
    /**
     * Organization hash to be sent to telemetry server.
     * @type {string}
     * @memberof Telemetry
     */
    organizationHash: string;
    /**
     * User hash to be sent to telemetry server.
     * @type {string}
     * @memberof Telemetry
     */
    userHash: string;
}
/**
 * Telemetry-related configuration.
 * @export
 * @interface TelemetryConfig
 */
export interface TelemetryConfig {
    /**
     *
     * @type {TelemetryContext}
     * @memberof TelemetryConfig
     */
    context: TelemetryContext;
    /**
     *
     * @type {TelemetryServices}
     * @memberof TelemetryConfig
     */
    services: TelemetryServices;
}
/**
 * The telemetry context.
 * @export
 * @interface TelemetryContext
 */
export interface TelemetryContext {
    /**
     * Identification of the deployment.
     * @type {string}
     * @memberof TelemetryContext
     */
    deploymentId: string;
    /**
     * Organization hash.
     * @type {string}
     * @memberof TelemetryContext
     */
    organizationHash: string;
    /**
     * User hash.
     * @type {string}
     * @memberof TelemetryContext
     */
    userHash: string;
}
/**
 * Available telemetry services.
 * @export
 * @interface TelemetryServices
 */
export interface TelemetryServices {
    /**
     *
     * @type {MatomoService}
     * @memberof TelemetryServices
     */
    matomo?: MatomoService;
    /**
     *
     * @type {OpenTelemetryService}
     * @memberof TelemetryServices
     */
    openTelemetry?: OpenTelemetryService;
}

/**
 * ActionsApi - axios parameter creator
 * @export
 */
export const ActionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Puts a new invitation requirement into the invitation generator queue. This is a GoodData Cloud specific endpoint.
         * @summary Invite User
         * @param {Invitation} invitation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processInvitation: async (
            invitation: Invitation,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'invitation' is not null or undefined
            assertParamExists("processInvitation", "invitation", invitation);
            const localVarPath = `/api/v1/actions/invite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof invitation !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(invitation !== undefined ? invitation : {})
                : invitation || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * ActionsApi - functional programming interface
 * @export
 */
export const ActionsApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = ActionsApiAxiosParamCreator(configuration);
    return {
        /**
         * Puts a new invitation requirement into the invitation generator queue. This is a GoodData Cloud specific endpoint.
         * @summary Invite User
         * @param {Invitation} invitation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processInvitation(
            invitation: Invitation,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processInvitation(invitation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};

/**
 * ActionsApi - factory interface
 * @export
 */
export const ActionsApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    const localVarFp = ActionsApiFp(configuration);
    return {
        /**
         * Puts a new invitation requirement into the invitation generator queue. This is a GoodData Cloud specific endpoint.
         * @summary Invite User
         * @param {ActionsApiProcessInvitationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processInvitation(
            requestParameters: ActionsApiProcessInvitationRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .processInvitation(requestParameters.invitation, options)
                .then((request) => request(axios, basePath));
        },
    };
};

/**
 * ActionsApi - interface
 * @export
 * @interface ActionsApi
 */
export interface ActionsApiInterface {
    /**
     * Puts a new invitation requirement into the invitation generator queue. This is a GoodData Cloud specific endpoint.
     * @summary Invite User
     * @param {ActionsApiProcessInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    processInvitation(
        requestParameters: ActionsApiProcessInvitationRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<void>;
}

/**
 * Request parameters for processInvitation operation in ActionsApi.
 * @export
 * @interface ActionsApiProcessInvitationRequest
 */
export interface ActionsApiProcessInvitationRequest {
    /**
     *
     * @type {Invitation}
     * @memberof ActionsApiProcessInvitation
     */
    readonly invitation: Invitation;
}

/**
 * ActionsApi - object-oriented interface
 * @export
 * @class ActionsApi
 * @extends {BaseAPI}
 */
export class ActionsApi extends BaseAPI implements ActionsApiInterface {
    /**
     * Puts a new invitation requirement into the invitation generator queue. This is a GoodData Cloud specific endpoint.
     * @summary Invite User
     * @param {ActionsApiProcessInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public processInvitation(
        requestParameters: ActionsApiProcessInvitationRequest,
        options?: AxiosRequestConfig,
    ) {
        return ActionsApiFp(this.configuration)
            .processInvitation(requestParameters.invitation, options)
            .then((request) => request(this.axios, this.basePath));
    }
}

/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a Profile including Organization and Current User Information.
         * @summary Get Profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration);
    return {
        /**
         * Returns a Profile including Organization and Current User Information.
         * @summary Get Profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfile(
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Profile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProfile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    const localVarFp = AuthenticationApiFp(configuration);
    return {
        /**
         * Returns a Profile including Organization and Current User Information.
         * @summary Get Profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile(options?: AxiosRequestConfig): AxiosPromise<Profile> {
            return localVarFp.getProfile(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - interface
 * @export
 * @interface AuthenticationApi
 */
export interface AuthenticationApiInterface {
    /**
     * Returns a Profile including Organization and Current User Information.
     * @summary Get Profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    getProfile(options?: AxiosRequestConfig): AxiosPromise<Profile>;
}

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI implements AuthenticationApiInterface {
    /**
     * Returns a Profile including Organization and Current User Information.
     * @summary Get Profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public getProfile(options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration)
            .getProfile(options)
            .then((request) => request(this.axios, this.basePath));
    }
}

/**
 * UserAuthorizationApi - axios parameter creator
 * @export
 */
export const UserAuthorizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a Profile including Organization and Current User Information.
         * @summary Get Profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Puts a new invitation requirement into the invitation generator queue. This is a GoodData Cloud specific endpoint.
         * @summary Invite User
         * @param {Invitation} invitation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processInvitation: async (
            invitation: Invitation,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'invitation' is not null or undefined
            assertParamExists("processInvitation", "invitation", invitation);
            const localVarPath = `/api/v1/actions/invite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof invitation !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(invitation !== undefined ? invitation : {})
                : invitation || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * UserAuthorizationApi - functional programming interface
 * @export
 */
export const UserAuthorizationApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = UserAuthorizationApiAxiosParamCreator(configuration);
    return {
        /**
         * Returns a Profile including Organization and Current User Information.
         * @summary Get Profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfile(
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Profile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProfile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Puts a new invitation requirement into the invitation generator queue. This is a GoodData Cloud specific endpoint.
         * @summary Invite User
         * @param {Invitation} invitation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processInvitation(
            invitation: Invitation,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processInvitation(invitation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};

/**
 * UserAuthorizationApi - factory interface
 * @export
 */
export const UserAuthorizationApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    const localVarFp = UserAuthorizationApiFp(configuration);
    return {
        /**
         * Returns a Profile including Organization and Current User Information.
         * @summary Get Profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile(options?: AxiosRequestConfig): AxiosPromise<Profile> {
            return localVarFp.getProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * Puts a new invitation requirement into the invitation generator queue. This is a GoodData Cloud specific endpoint.
         * @summary Invite User
         * @param {UserAuthorizationApiProcessInvitationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processInvitation(
            requestParameters: UserAuthorizationApiProcessInvitationRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .processInvitation(requestParameters.invitation, options)
                .then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserAuthorizationApi - interface
 * @export
 * @interface UserAuthorizationApi
 */
export interface UserAuthorizationApiInterface {
    /**
     * Returns a Profile including Organization and Current User Information.
     * @summary Get Profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAuthorizationApiInterface
     */
    getProfile(options?: AxiosRequestConfig): AxiosPromise<Profile>;

    /**
     * Puts a new invitation requirement into the invitation generator queue. This is a GoodData Cloud specific endpoint.
     * @summary Invite User
     * @param {UserAuthorizationApiProcessInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAuthorizationApiInterface
     */
    processInvitation(
        requestParameters: UserAuthorizationApiProcessInvitationRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<void>;
}

/**
 * Request parameters for processInvitation operation in UserAuthorizationApi.
 * @export
 * @interface UserAuthorizationApiProcessInvitationRequest
 */
export interface UserAuthorizationApiProcessInvitationRequest {
    /**
     *
     * @type {Invitation}
     * @memberof UserAuthorizationApiProcessInvitation
     */
    readonly invitation: Invitation;
}

/**
 * UserAuthorizationApi - object-oriented interface
 * @export
 * @class UserAuthorizationApi
 * @extends {BaseAPI}
 */
export class UserAuthorizationApi extends BaseAPI implements UserAuthorizationApiInterface {
    /**
     * Returns a Profile including Organization and Current User Information.
     * @summary Get Profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAuthorizationApi
     */
    public getProfile(options?: AxiosRequestConfig) {
        return UserAuthorizationApiFp(this.configuration)
            .getProfile(options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Puts a new invitation requirement into the invitation generator queue. This is a GoodData Cloud specific endpoint.
     * @summary Invite User
     * @param {UserAuthorizationApiProcessInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAuthorizationApi
     */
    public processInvitation(
        requestParameters: UserAuthorizationApiProcessInvitationRequest,
        options?: AxiosRequestConfig,
    ) {
        return UserAuthorizationApiFp(this.configuration)
            .processInvitation(requestParameters.invitation, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
